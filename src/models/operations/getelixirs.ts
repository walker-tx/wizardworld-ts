/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import * as components from "../components/index.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type GetElixirsRequest = {
  name?: string | undefined;
  difficulty?: components.ElixirDifficulty | undefined;
  ingredient?: string | undefined;
  inventorFullName?: string | undefined;
  manufacturer?: string | undefined;
};

export type GetElixirsResponse =
  | string
  | Array<components.ElixirDto>
  | Array<components.ElixirDto>;

/** @internal */
export const GetElixirsRequest$inboundSchema: z.ZodType<
  GetElixirsRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  Name: z.string().optional(),
  Difficulty: components.ElixirDifficulty$inboundSchema.optional(),
  Ingredient: z.string().optional(),
  InventorFullName: z.string().optional(),
  Manufacturer: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    "Name": "name",
    "Difficulty": "difficulty",
    "Ingredient": "ingredient",
    "InventorFullName": "inventorFullName",
    "Manufacturer": "manufacturer",
  });
});

/** @internal */
export type GetElixirsRequest$Outbound = {
  Name?: string | undefined;
  Difficulty?: string | undefined;
  Ingredient?: string | undefined;
  InventorFullName?: string | undefined;
  Manufacturer?: string | undefined;
};

/** @internal */
export const GetElixirsRequest$outboundSchema: z.ZodType<
  GetElixirsRequest$Outbound,
  z.ZodTypeDef,
  GetElixirsRequest
> = z.object({
  name: z.string().optional(),
  difficulty: components.ElixirDifficulty$outboundSchema.optional(),
  ingredient: z.string().optional(),
  inventorFullName: z.string().optional(),
  manufacturer: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    name: "Name",
    difficulty: "Difficulty",
    ingredient: "Ingredient",
    inventorFullName: "InventorFullName",
    manufacturer: "Manufacturer",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetElixirsRequest$ {
  /** @deprecated use `GetElixirsRequest$inboundSchema` instead. */
  export const inboundSchema = GetElixirsRequest$inboundSchema;
  /** @deprecated use `GetElixirsRequest$outboundSchema` instead. */
  export const outboundSchema = GetElixirsRequest$outboundSchema;
  /** @deprecated use `GetElixirsRequest$Outbound` instead. */
  export type Outbound = GetElixirsRequest$Outbound;
}

export function getElixirsRequestToJSON(
  getElixirsRequest: GetElixirsRequest,
): string {
  return JSON.stringify(
    GetElixirsRequest$outboundSchema.parse(getElixirsRequest),
  );
}

export function getElixirsRequestFromJSON(
  jsonString: string,
): SafeParseResult<GetElixirsRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetElixirsRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetElixirsRequest' from JSON`,
  );
}

/** @internal */
export const GetElixirsResponse$inboundSchema: z.ZodType<
  GetElixirsResponse,
  z.ZodTypeDef,
  unknown
> = z.union([
  z.string(),
  z.array(components.ElixirDto$inboundSchema),
  z.array(components.ElixirDto$inboundSchema),
]);

/** @internal */
export type GetElixirsResponse$Outbound =
  | string
  | Array<components.ElixirDto$Outbound>
  | Array<components.ElixirDto$Outbound>;

/** @internal */
export const GetElixirsResponse$outboundSchema: z.ZodType<
  GetElixirsResponse$Outbound,
  z.ZodTypeDef,
  GetElixirsResponse
> = z.union([
  z.string(),
  z.array(components.ElixirDto$outboundSchema),
  z.array(components.ElixirDto$outboundSchema),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetElixirsResponse$ {
  /** @deprecated use `GetElixirsResponse$inboundSchema` instead. */
  export const inboundSchema = GetElixirsResponse$inboundSchema;
  /** @deprecated use `GetElixirsResponse$outboundSchema` instead. */
  export const outboundSchema = GetElixirsResponse$outboundSchema;
  /** @deprecated use `GetElixirsResponse$Outbound` instead. */
  export type Outbound = GetElixirsResponse$Outbound;
}

export function getElixirsResponseToJSON(
  getElixirsResponse: GetElixirsResponse,
): string {
  return JSON.stringify(
    GetElixirsResponse$outboundSchema.parse(getElixirsResponse),
  );
}

export function getElixirsResponseFromJSON(
  jsonString: string,
): SafeParseResult<GetElixirsResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetElixirsResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetElixirsResponse' from JSON`,
  );
}
