/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import * as components from "../components/index.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type GetIngredientsIdRequest = {
  id: string;
};

export type GetIngredientsIdResponse = components.IngredientDto | string;

/** @internal */
export const GetIngredientsIdRequest$inboundSchema: z.ZodType<
  GetIngredientsIdRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.string(),
});

/** @internal */
export type GetIngredientsIdRequest$Outbound = {
  id: string;
};

/** @internal */
export const GetIngredientsIdRequest$outboundSchema: z.ZodType<
  GetIngredientsIdRequest$Outbound,
  z.ZodTypeDef,
  GetIngredientsIdRequest
> = z.object({
  id: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetIngredientsIdRequest$ {
  /** @deprecated use `GetIngredientsIdRequest$inboundSchema` instead. */
  export const inboundSchema = GetIngredientsIdRequest$inboundSchema;
  /** @deprecated use `GetIngredientsIdRequest$outboundSchema` instead. */
  export const outboundSchema = GetIngredientsIdRequest$outboundSchema;
  /** @deprecated use `GetIngredientsIdRequest$Outbound` instead. */
  export type Outbound = GetIngredientsIdRequest$Outbound;
}

export function getIngredientsIdRequestToJSON(
  getIngredientsIdRequest: GetIngredientsIdRequest,
): string {
  return JSON.stringify(
    GetIngredientsIdRequest$outboundSchema.parse(getIngredientsIdRequest),
  );
}

export function getIngredientsIdRequestFromJSON(
  jsonString: string,
): SafeParseResult<GetIngredientsIdRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetIngredientsIdRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetIngredientsIdRequest' from JSON`,
  );
}

/** @internal */
export const GetIngredientsIdResponse$inboundSchema: z.ZodType<
  GetIngredientsIdResponse,
  z.ZodTypeDef,
  unknown
> = z.union([components.IngredientDto$inboundSchema, z.string()]);

/** @internal */
export type GetIngredientsIdResponse$Outbound =
  | components.IngredientDto$Outbound
  | string;

/** @internal */
export const GetIngredientsIdResponse$outboundSchema: z.ZodType<
  GetIngredientsIdResponse$Outbound,
  z.ZodTypeDef,
  GetIngredientsIdResponse
> = z.union([components.IngredientDto$outboundSchema, z.string()]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetIngredientsIdResponse$ {
  /** @deprecated use `GetIngredientsIdResponse$inboundSchema` instead. */
  export const inboundSchema = GetIngredientsIdResponse$inboundSchema;
  /** @deprecated use `GetIngredientsIdResponse$outboundSchema` instead. */
  export const outboundSchema = GetIngredientsIdResponse$outboundSchema;
  /** @deprecated use `GetIngredientsIdResponse$Outbound` instead. */
  export type Outbound = GetIngredientsIdResponse$Outbound;
}

export function getIngredientsIdResponseToJSON(
  getIngredientsIdResponse: GetIngredientsIdResponse,
): string {
  return JSON.stringify(
    GetIngredientsIdResponse$outboundSchema.parse(getIngredientsIdResponse),
  );
}

export function getIngredientsIdResponseFromJSON(
  jsonString: string,
): SafeParseResult<GetIngredientsIdResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetIngredientsIdResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetIngredientsIdResponse' from JSON`,
  );
}
