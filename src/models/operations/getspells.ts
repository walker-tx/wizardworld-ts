/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import * as components from "../components/index.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type GetSpellsRequest = {
  name?: string | undefined;
  type?: components.SpellType | undefined;
  incantation?: string | undefined;
};

export type GetSpellsResponse =
  | string
  | Array<components.SpellDto>
  | Array<components.SpellDto>;

/** @internal */
export const GetSpellsRequest$inboundSchema: z.ZodType<
  GetSpellsRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  Name: z.string().optional(),
  Type: components.SpellType$inboundSchema.optional(),
  Incantation: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    "Name": "name",
    "Type": "type",
    "Incantation": "incantation",
  });
});

/** @internal */
export type GetSpellsRequest$Outbound = {
  Name?: string | undefined;
  Type?: string | undefined;
  Incantation?: string | undefined;
};

/** @internal */
export const GetSpellsRequest$outboundSchema: z.ZodType<
  GetSpellsRequest$Outbound,
  z.ZodTypeDef,
  GetSpellsRequest
> = z.object({
  name: z.string().optional(),
  type: components.SpellType$outboundSchema.optional(),
  incantation: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    name: "Name",
    type: "Type",
    incantation: "Incantation",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetSpellsRequest$ {
  /** @deprecated use `GetSpellsRequest$inboundSchema` instead. */
  export const inboundSchema = GetSpellsRequest$inboundSchema;
  /** @deprecated use `GetSpellsRequest$outboundSchema` instead. */
  export const outboundSchema = GetSpellsRequest$outboundSchema;
  /** @deprecated use `GetSpellsRequest$Outbound` instead. */
  export type Outbound = GetSpellsRequest$Outbound;
}

export function getSpellsRequestToJSON(
  getSpellsRequest: GetSpellsRequest,
): string {
  return JSON.stringify(
    GetSpellsRequest$outboundSchema.parse(getSpellsRequest),
  );
}

export function getSpellsRequestFromJSON(
  jsonString: string,
): SafeParseResult<GetSpellsRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetSpellsRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetSpellsRequest' from JSON`,
  );
}

/** @internal */
export const GetSpellsResponse$inboundSchema: z.ZodType<
  GetSpellsResponse,
  z.ZodTypeDef,
  unknown
> = z.union([
  z.string(),
  z.array(components.SpellDto$inboundSchema),
  z.array(components.SpellDto$inboundSchema),
]);

/** @internal */
export type GetSpellsResponse$Outbound =
  | string
  | Array<components.SpellDto$Outbound>
  | Array<components.SpellDto$Outbound>;

/** @internal */
export const GetSpellsResponse$outboundSchema: z.ZodType<
  GetSpellsResponse$Outbound,
  z.ZodTypeDef,
  GetSpellsResponse
> = z.union([
  z.string(),
  z.array(components.SpellDto$outboundSchema),
  z.array(components.SpellDto$outboundSchema),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetSpellsResponse$ {
  /** @deprecated use `GetSpellsResponse$inboundSchema` instead. */
  export const inboundSchema = GetSpellsResponse$inboundSchema;
  /** @deprecated use `GetSpellsResponse$outboundSchema` instead. */
  export const outboundSchema = GetSpellsResponse$outboundSchema;
  /** @deprecated use `GetSpellsResponse$Outbound` instead. */
  export type Outbound = GetSpellsResponse$Outbound;
}

export function getSpellsResponseToJSON(
  getSpellsResponse: GetSpellsResponse,
): string {
  return JSON.stringify(
    GetSpellsResponse$outboundSchema.parse(getSpellsResponse),
  );
}

export function getSpellsResponseFromJSON(
  jsonString: string,
): SafeParseResult<GetSpellsResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetSpellsResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetSpellsResponse' from JSON`,
  );
}
