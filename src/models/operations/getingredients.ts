/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import * as components from "../components/index.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type GetIngredientsRequest = {
  name?: string | undefined;
};

export type GetIngredientsResponse =
  | string
  | Array<components.IngredientDto>
  | Array<components.IngredientDto>;

/** @internal */
export const GetIngredientsRequest$inboundSchema: z.ZodType<
  GetIngredientsRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  Name: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    "Name": "name",
  });
});

/** @internal */
export type GetIngredientsRequest$Outbound = {
  Name?: string | undefined;
};

/** @internal */
export const GetIngredientsRequest$outboundSchema: z.ZodType<
  GetIngredientsRequest$Outbound,
  z.ZodTypeDef,
  GetIngredientsRequest
> = z.object({
  name: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    name: "Name",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetIngredientsRequest$ {
  /** @deprecated use `GetIngredientsRequest$inboundSchema` instead. */
  export const inboundSchema = GetIngredientsRequest$inboundSchema;
  /** @deprecated use `GetIngredientsRequest$outboundSchema` instead. */
  export const outboundSchema = GetIngredientsRequest$outboundSchema;
  /** @deprecated use `GetIngredientsRequest$Outbound` instead. */
  export type Outbound = GetIngredientsRequest$Outbound;
}

export function getIngredientsRequestToJSON(
  getIngredientsRequest: GetIngredientsRequest,
): string {
  return JSON.stringify(
    GetIngredientsRequest$outboundSchema.parse(getIngredientsRequest),
  );
}

export function getIngredientsRequestFromJSON(
  jsonString: string,
): SafeParseResult<GetIngredientsRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetIngredientsRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetIngredientsRequest' from JSON`,
  );
}

/** @internal */
export const GetIngredientsResponse$inboundSchema: z.ZodType<
  GetIngredientsResponse,
  z.ZodTypeDef,
  unknown
> = z.union([
  z.string(),
  z.array(components.IngredientDto$inboundSchema),
  z.array(components.IngredientDto$inboundSchema),
]);

/** @internal */
export type GetIngredientsResponse$Outbound =
  | string
  | Array<components.IngredientDto$Outbound>
  | Array<components.IngredientDto$Outbound>;

/** @internal */
export const GetIngredientsResponse$outboundSchema: z.ZodType<
  GetIngredientsResponse$Outbound,
  z.ZodTypeDef,
  GetIngredientsResponse
> = z.union([
  z.string(),
  z.array(components.IngredientDto$outboundSchema),
  z.array(components.IngredientDto$outboundSchema),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetIngredientsResponse$ {
  /** @deprecated use `GetIngredientsResponse$inboundSchema` instead. */
  export const inboundSchema = GetIngredientsResponse$inboundSchema;
  /** @deprecated use `GetIngredientsResponse$outboundSchema` instead. */
  export const outboundSchema = GetIngredientsResponse$outboundSchema;
  /** @deprecated use `GetIngredientsResponse$Outbound` instead. */
  export type Outbound = GetIngredientsResponse$Outbound;
}

export function getIngredientsResponseToJSON(
  getIngredientsResponse: GetIngredientsResponse,
): string {
  return JSON.stringify(
    GetIngredientsResponse$outboundSchema.parse(getIngredientsResponse),
  );
}

export function getIngredientsResponseFromJSON(
  jsonString: string,
): SafeParseResult<GetIngredientsResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetIngredientsResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetIngredientsResponse' from JSON`,
  );
}
