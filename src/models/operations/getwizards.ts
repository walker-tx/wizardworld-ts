/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import * as components from "../components/index.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type GetWizardsRequest = {
  firstName?: string | undefined;
  lastName?: string | undefined;
};

export type GetWizardsResponse =
  | string
  | Array<components.WizardDto>
  | Array<components.WizardDto>;

/** @internal */
export const GetWizardsRequest$inboundSchema: z.ZodType<
  GetWizardsRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  FirstName: z.string().optional(),
  LastName: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    "FirstName": "firstName",
    "LastName": "lastName",
  });
});

/** @internal */
export type GetWizardsRequest$Outbound = {
  FirstName?: string | undefined;
  LastName?: string | undefined;
};

/** @internal */
export const GetWizardsRequest$outboundSchema: z.ZodType<
  GetWizardsRequest$Outbound,
  z.ZodTypeDef,
  GetWizardsRequest
> = z.object({
  firstName: z.string().optional(),
  lastName: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    firstName: "FirstName",
    lastName: "LastName",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetWizardsRequest$ {
  /** @deprecated use `GetWizardsRequest$inboundSchema` instead. */
  export const inboundSchema = GetWizardsRequest$inboundSchema;
  /** @deprecated use `GetWizardsRequest$outboundSchema` instead. */
  export const outboundSchema = GetWizardsRequest$outboundSchema;
  /** @deprecated use `GetWizardsRequest$Outbound` instead. */
  export type Outbound = GetWizardsRequest$Outbound;
}

export function getWizardsRequestToJSON(
  getWizardsRequest: GetWizardsRequest,
): string {
  return JSON.stringify(
    GetWizardsRequest$outboundSchema.parse(getWizardsRequest),
  );
}

export function getWizardsRequestFromJSON(
  jsonString: string,
): SafeParseResult<GetWizardsRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetWizardsRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetWizardsRequest' from JSON`,
  );
}

/** @internal */
export const GetWizardsResponse$inboundSchema: z.ZodType<
  GetWizardsResponse,
  z.ZodTypeDef,
  unknown
> = z.union([
  z.string(),
  z.array(components.WizardDto$inboundSchema),
  z.array(components.WizardDto$inboundSchema),
]);

/** @internal */
export type GetWizardsResponse$Outbound =
  | string
  | Array<components.WizardDto$Outbound>
  | Array<components.WizardDto$Outbound>;

/** @internal */
export const GetWizardsResponse$outboundSchema: z.ZodType<
  GetWizardsResponse$Outbound,
  z.ZodTypeDef,
  GetWizardsResponse
> = z.union([
  z.string(),
  z.array(components.WizardDto$outboundSchema),
  z.array(components.WizardDto$outboundSchema),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetWizardsResponse$ {
  /** @deprecated use `GetWizardsResponse$inboundSchema` instead. */
  export const inboundSchema = GetWizardsResponse$inboundSchema;
  /** @deprecated use `GetWizardsResponse$outboundSchema` instead. */
  export const outboundSchema = GetWizardsResponse$outboundSchema;
  /** @deprecated use `GetWizardsResponse$Outbound` instead. */
  export type Outbound = GetWizardsResponse$Outbound;
}

export function getWizardsResponseToJSON(
  getWizardsResponse: GetWizardsResponse,
): string {
  return JSON.stringify(
    GetWizardsResponse$outboundSchema.parse(getWizardsResponse),
  );
}

export function getWizardsResponseFromJSON(
  jsonString: string,
): SafeParseResult<GetWizardsResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetWizardsResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetWizardsResponse' from JSON`,
  );
}
