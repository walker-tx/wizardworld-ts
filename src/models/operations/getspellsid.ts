/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import * as components from "../components/index.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type GetSpellsIdRequest = {
  id: string;
};

export type GetSpellsIdResponse = components.SpellDto | string;

/** @internal */
export const GetSpellsIdRequest$inboundSchema: z.ZodType<
  GetSpellsIdRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.string(),
});

/** @internal */
export type GetSpellsIdRequest$Outbound = {
  id: string;
};

/** @internal */
export const GetSpellsIdRequest$outboundSchema: z.ZodType<
  GetSpellsIdRequest$Outbound,
  z.ZodTypeDef,
  GetSpellsIdRequest
> = z.object({
  id: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetSpellsIdRequest$ {
  /** @deprecated use `GetSpellsIdRequest$inboundSchema` instead. */
  export const inboundSchema = GetSpellsIdRequest$inboundSchema;
  /** @deprecated use `GetSpellsIdRequest$outboundSchema` instead. */
  export const outboundSchema = GetSpellsIdRequest$outboundSchema;
  /** @deprecated use `GetSpellsIdRequest$Outbound` instead. */
  export type Outbound = GetSpellsIdRequest$Outbound;
}

export function getSpellsIdRequestToJSON(
  getSpellsIdRequest: GetSpellsIdRequest,
): string {
  return JSON.stringify(
    GetSpellsIdRequest$outboundSchema.parse(getSpellsIdRequest),
  );
}

export function getSpellsIdRequestFromJSON(
  jsonString: string,
): SafeParseResult<GetSpellsIdRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetSpellsIdRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetSpellsIdRequest' from JSON`,
  );
}

/** @internal */
export const GetSpellsIdResponse$inboundSchema: z.ZodType<
  GetSpellsIdResponse,
  z.ZodTypeDef,
  unknown
> = z.union([components.SpellDto$inboundSchema, z.string()]);

/** @internal */
export type GetSpellsIdResponse$Outbound =
  | components.SpellDto$Outbound
  | string;

/** @internal */
export const GetSpellsIdResponse$outboundSchema: z.ZodType<
  GetSpellsIdResponse$Outbound,
  z.ZodTypeDef,
  GetSpellsIdResponse
> = z.union([components.SpellDto$outboundSchema, z.string()]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetSpellsIdResponse$ {
  /** @deprecated use `GetSpellsIdResponse$inboundSchema` instead. */
  export const inboundSchema = GetSpellsIdResponse$inboundSchema;
  /** @deprecated use `GetSpellsIdResponse$outboundSchema` instead. */
  export const outboundSchema = GetSpellsIdResponse$outboundSchema;
  /** @deprecated use `GetSpellsIdResponse$Outbound` instead. */
  export type Outbound = GetSpellsIdResponse$Outbound;
}

export function getSpellsIdResponseToJSON(
  getSpellsIdResponse: GetSpellsIdResponse,
): string {
  return JSON.stringify(
    GetSpellsIdResponse$outboundSchema.parse(getSpellsIdResponse),
  );
}

export function getSpellsIdResponseFromJSON(
  jsonString: string,
): SafeParseResult<GetSpellsIdResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetSpellsIdResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetSpellsIdResponse' from JSON`,
  );
}
