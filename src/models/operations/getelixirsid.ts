/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import * as components from "../components/index.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type GetElixirsIdRequest = {
  id: string;
};

export type GetElixirsIdResponse = components.ElixirDto | string;

/** @internal */
export const GetElixirsIdRequest$inboundSchema: z.ZodType<
  GetElixirsIdRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.string(),
});

/** @internal */
export type GetElixirsIdRequest$Outbound = {
  id: string;
};

/** @internal */
export const GetElixirsIdRequest$outboundSchema: z.ZodType<
  GetElixirsIdRequest$Outbound,
  z.ZodTypeDef,
  GetElixirsIdRequest
> = z.object({
  id: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetElixirsIdRequest$ {
  /** @deprecated use `GetElixirsIdRequest$inboundSchema` instead. */
  export const inboundSchema = GetElixirsIdRequest$inboundSchema;
  /** @deprecated use `GetElixirsIdRequest$outboundSchema` instead. */
  export const outboundSchema = GetElixirsIdRequest$outboundSchema;
  /** @deprecated use `GetElixirsIdRequest$Outbound` instead. */
  export type Outbound = GetElixirsIdRequest$Outbound;
}

export function getElixirsIdRequestToJSON(
  getElixirsIdRequest: GetElixirsIdRequest,
): string {
  return JSON.stringify(
    GetElixirsIdRequest$outboundSchema.parse(getElixirsIdRequest),
  );
}

export function getElixirsIdRequestFromJSON(
  jsonString: string,
): SafeParseResult<GetElixirsIdRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetElixirsIdRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetElixirsIdRequest' from JSON`,
  );
}

/** @internal */
export const GetElixirsIdResponse$inboundSchema: z.ZodType<
  GetElixirsIdResponse,
  z.ZodTypeDef,
  unknown
> = z.union([components.ElixirDto$inboundSchema, z.string()]);

/** @internal */
export type GetElixirsIdResponse$Outbound =
  | components.ElixirDto$Outbound
  | string;

/** @internal */
export const GetElixirsIdResponse$outboundSchema: z.ZodType<
  GetElixirsIdResponse$Outbound,
  z.ZodTypeDef,
  GetElixirsIdResponse
> = z.union([components.ElixirDto$outboundSchema, z.string()]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetElixirsIdResponse$ {
  /** @deprecated use `GetElixirsIdResponse$inboundSchema` instead. */
  export const inboundSchema = GetElixirsIdResponse$inboundSchema;
  /** @deprecated use `GetElixirsIdResponse$outboundSchema` instead. */
  export const outboundSchema = GetElixirsIdResponse$outboundSchema;
  /** @deprecated use `GetElixirsIdResponse$Outbound` instead. */
  export type Outbound = GetElixirsIdResponse$Outbound;
}

export function getElixirsIdResponseToJSON(
  getElixirsIdResponse: GetElixirsIdResponse,
): string {
  return JSON.stringify(
    GetElixirsIdResponse$outboundSchema.parse(getElixirsIdResponse),
  );
}

export function getElixirsIdResponseFromJSON(
  jsonString: string,
): SafeParseResult<GetElixirsIdResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetElixirsIdResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetElixirsIdResponse' from JSON`,
  );
}
