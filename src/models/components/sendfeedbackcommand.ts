/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import {
  FeedbackType,
  FeedbackType$inboundSchema,
  FeedbackType$outboundSchema,
} from "./feedbacktype.js";

export type SendFeedbackCommand = {
  feedbackType?: FeedbackType | undefined;
  feedback?: string | null | undefined;
  entityId?: string | null | undefined;
};

/** @internal */
export const SendFeedbackCommand$inboundSchema: z.ZodType<
  SendFeedbackCommand,
  z.ZodTypeDef,
  unknown
> = z.object({
  feedbackType: FeedbackType$inboundSchema.optional(),
  feedback: z.nullable(z.string()).optional(),
  entityId: z.nullable(z.string()).optional(),
});

/** @internal */
export type SendFeedbackCommand$Outbound = {
  feedbackType?: string | undefined;
  feedback?: string | null | undefined;
  entityId?: string | null | undefined;
};

/** @internal */
export const SendFeedbackCommand$outboundSchema: z.ZodType<
  SendFeedbackCommand$Outbound,
  z.ZodTypeDef,
  SendFeedbackCommand
> = z.object({
  feedbackType: FeedbackType$outboundSchema.optional(),
  feedback: z.nullable(z.string()).optional(),
  entityId: z.nullable(z.string()).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace SendFeedbackCommand$ {
  /** @deprecated use `SendFeedbackCommand$inboundSchema` instead. */
  export const inboundSchema = SendFeedbackCommand$inboundSchema;
  /** @deprecated use `SendFeedbackCommand$outboundSchema` instead. */
  export const outboundSchema = SendFeedbackCommand$outboundSchema;
  /** @deprecated use `SendFeedbackCommand$Outbound` instead. */
  export type Outbound = SendFeedbackCommand$Outbound;
}

export function sendFeedbackCommandToJSON(
  sendFeedbackCommand: SendFeedbackCommand,
): string {
  return JSON.stringify(
    SendFeedbackCommand$outboundSchema.parse(sendFeedbackCommand),
  );
}

export function sendFeedbackCommandFromJSON(
  jsonString: string,
): SafeParseResult<SendFeedbackCommand, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => SendFeedbackCommand$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'SendFeedbackCommand' from JSON`,
  );
}
