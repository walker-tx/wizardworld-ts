/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import {
  SpellLight,
  SpellLight$inboundSchema,
  SpellLight$outboundSchema,
} from "./spelllight.js";
import {
  SpellType,
  SpellType$inboundSchema,
  SpellType$outboundSchema,
} from "./spelltype.js";

export type SpellDto = {
  id?: string | undefined;
  name?: string | null | undefined;
  incantation?: string | null | undefined;
  effect?: string | null | undefined;
  canBeVerbal?: boolean | null | undefined;
  type?: SpellType | undefined;
  light?: SpellLight | undefined;
  creator?: string | null | undefined;
};

/** @internal */
export const SpellDto$inboundSchema: z.ZodType<
  SpellDto,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.string().optional(),
  name: z.nullable(z.string()).optional(),
  incantation: z.nullable(z.string()).optional(),
  effect: z.nullable(z.string()).optional(),
  canBeVerbal: z.nullable(z.boolean()).optional(),
  type: SpellType$inboundSchema.optional(),
  light: SpellLight$inboundSchema.optional(),
  creator: z.nullable(z.string()).optional(),
});

/** @internal */
export type SpellDto$Outbound = {
  id?: string | undefined;
  name?: string | null | undefined;
  incantation?: string | null | undefined;
  effect?: string | null | undefined;
  canBeVerbal?: boolean | null | undefined;
  type?: string | undefined;
  light?: string | undefined;
  creator?: string | null | undefined;
};

/** @internal */
export const SpellDto$outboundSchema: z.ZodType<
  SpellDto$Outbound,
  z.ZodTypeDef,
  SpellDto
> = z.object({
  id: z.string().optional(),
  name: z.nullable(z.string()).optional(),
  incantation: z.nullable(z.string()).optional(),
  effect: z.nullable(z.string()).optional(),
  canBeVerbal: z.nullable(z.boolean()).optional(),
  type: SpellType$outboundSchema.optional(),
  light: SpellLight$outboundSchema.optional(),
  creator: z.nullable(z.string()).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace SpellDto$ {
  /** @deprecated use `SpellDto$inboundSchema` instead. */
  export const inboundSchema = SpellDto$inboundSchema;
  /** @deprecated use `SpellDto$outboundSchema` instead. */
  export const outboundSchema = SpellDto$outboundSchema;
  /** @deprecated use `SpellDto$Outbound` instead. */
  export type Outbound = SpellDto$Outbound;
}

export function spellDtoToJSON(spellDto: SpellDto): string {
  return JSON.stringify(SpellDto$outboundSchema.parse(spellDto));
}

export function spellDtoFromJSON(
  jsonString: string,
): SafeParseResult<SpellDto, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => SpellDto$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'SpellDto' from JSON`,
  );
}
