/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import {
  TraitName,
  TraitName$inboundSchema,
  TraitName$outboundSchema,
} from "./traitname.js";

export type TraitDto = {
  id?: string | undefined;
  name?: TraitName | undefined;
};

/** @internal */
export const TraitDto$inboundSchema: z.ZodType<
  TraitDto,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.string().optional(),
  name: TraitName$inboundSchema.optional(),
});

/** @internal */
export type TraitDto$Outbound = {
  id?: string | undefined;
  name?: string | undefined;
};

/** @internal */
export const TraitDto$outboundSchema: z.ZodType<
  TraitDto$Outbound,
  z.ZodTypeDef,
  TraitDto
> = z.object({
  id: z.string().optional(),
  name: TraitName$outboundSchema.optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace TraitDto$ {
  /** @deprecated use `TraitDto$inboundSchema` instead. */
  export const inboundSchema = TraitDto$inboundSchema;
  /** @deprecated use `TraitDto$outboundSchema` instead. */
  export const outboundSchema = TraitDto$outboundSchema;
  /** @deprecated use `TraitDto$Outbound` instead. */
  export type Outbound = TraitDto$Outbound;
}

export function traitDtoToJSON(traitDto: TraitDto): string {
  return JSON.stringify(TraitDto$outboundSchema.parse(traitDto));
}

export function traitDtoFromJSON(
  jsonString: string,
): SafeParseResult<TraitDto, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => TraitDto$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'TraitDto' from JSON`,
  );
}
