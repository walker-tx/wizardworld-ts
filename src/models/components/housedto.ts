/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import {
  HouseHeadDto,
  HouseHeadDto$inboundSchema,
  HouseHeadDto$Outbound,
  HouseHeadDto$outboundSchema,
} from "./househeaddto.js";
import {
  TraitDto,
  TraitDto$inboundSchema,
  TraitDto$Outbound,
  TraitDto$outboundSchema,
} from "./traitdto.js";

export type HouseDto = {
  id?: string | undefined;
  name?: string | null | undefined;
  houseColours?: string | null | undefined;
  founder?: string | null | undefined;
  animal?: string | null | undefined;
  element?: string | null | undefined;
  ghost?: string | null | undefined;
  commonRoom?: string | null | undefined;
  heads?: Array<HouseHeadDto> | null | undefined;
  traits?: Array<TraitDto> | null | undefined;
};

/** @internal */
export const HouseDto$inboundSchema: z.ZodType<
  HouseDto,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.string().optional(),
  name: z.nullable(z.string()).optional(),
  houseColours: z.nullable(z.string()).optional(),
  founder: z.nullable(z.string()).optional(),
  animal: z.nullable(z.string()).optional(),
  element: z.nullable(z.string()).optional(),
  ghost: z.nullable(z.string()).optional(),
  commonRoom: z.nullable(z.string()).optional(),
  heads: z.nullable(z.array(HouseHeadDto$inboundSchema)).optional(),
  traits: z.nullable(z.array(TraitDto$inboundSchema)).optional(),
});

/** @internal */
export type HouseDto$Outbound = {
  id?: string | undefined;
  name?: string | null | undefined;
  houseColours?: string | null | undefined;
  founder?: string | null | undefined;
  animal?: string | null | undefined;
  element?: string | null | undefined;
  ghost?: string | null | undefined;
  commonRoom?: string | null | undefined;
  heads?: Array<HouseHeadDto$Outbound> | null | undefined;
  traits?: Array<TraitDto$Outbound> | null | undefined;
};

/** @internal */
export const HouseDto$outboundSchema: z.ZodType<
  HouseDto$Outbound,
  z.ZodTypeDef,
  HouseDto
> = z.object({
  id: z.string().optional(),
  name: z.nullable(z.string()).optional(),
  houseColours: z.nullable(z.string()).optional(),
  founder: z.nullable(z.string()).optional(),
  animal: z.nullable(z.string()).optional(),
  element: z.nullable(z.string()).optional(),
  ghost: z.nullable(z.string()).optional(),
  commonRoom: z.nullable(z.string()).optional(),
  heads: z.nullable(z.array(HouseHeadDto$outboundSchema)).optional(),
  traits: z.nullable(z.array(TraitDto$outboundSchema)).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace HouseDto$ {
  /** @deprecated use `HouseDto$inboundSchema` instead. */
  export const inboundSchema = HouseDto$inboundSchema;
  /** @deprecated use `HouseDto$outboundSchema` instead. */
  export const outboundSchema = HouseDto$outboundSchema;
  /** @deprecated use `HouseDto$Outbound` instead. */
  export type Outbound = HouseDto$Outbound;
}

export function houseDtoToJSON(houseDto: HouseDto): string {
  return JSON.stringify(HouseDto$outboundSchema.parse(houseDto));
}

export function houseDtoFromJSON(
  jsonString: string,
): SafeParseResult<HouseDto, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => HouseDto$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'HouseDto' from JSON`,
  );
}
