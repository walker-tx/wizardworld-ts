/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type IngredientDto = {
  id?: string | undefined;
  name?: string | null | undefined;
};

/** @internal */
export const IngredientDto$inboundSchema: z.ZodType<
  IngredientDto,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.string().optional(),
  name: z.nullable(z.string()).optional(),
});

/** @internal */
export type IngredientDto$Outbound = {
  id?: string | undefined;
  name?: string | null | undefined;
};

/** @internal */
export const IngredientDto$outboundSchema: z.ZodType<
  IngredientDto$Outbound,
  z.ZodTypeDef,
  IngredientDto
> = z.object({
  id: z.string().optional(),
  name: z.nullable(z.string()).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace IngredientDto$ {
  /** @deprecated use `IngredientDto$inboundSchema` instead. */
  export const inboundSchema = IngredientDto$inboundSchema;
  /** @deprecated use `IngredientDto$outboundSchema` instead. */
  export const outboundSchema = IngredientDto$outboundSchema;
  /** @deprecated use `IngredientDto$Outbound` instead. */
  export type Outbound = IngredientDto$Outbound;
}

export function ingredientDtoToJSON(ingredientDto: IngredientDto): string {
  return JSON.stringify(IngredientDto$outboundSchema.parse(ingredientDto));
}

export function ingredientDtoFromJSON(
  jsonString: string,
): SafeParseResult<IngredientDto, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => IngredientDto$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'IngredientDto' from JSON`,
  );
}
