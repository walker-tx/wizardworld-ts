/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type Unit = {};

/** @internal */
export const Unit$inboundSchema: z.ZodType<Unit, z.ZodTypeDef, unknown> = z
  .object({});

/** @internal */
export type Unit$Outbound = {};

/** @internal */
export const Unit$outboundSchema: z.ZodType<Unit$Outbound, z.ZodTypeDef, Unit> =
  z.object({});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Unit$ {
  /** @deprecated use `Unit$inboundSchema` instead. */
  export const inboundSchema = Unit$inboundSchema;
  /** @deprecated use `Unit$outboundSchema` instead. */
  export const outboundSchema = Unit$outboundSchema;
  /** @deprecated use `Unit$Outbound` instead. */
  export type Outbound = Unit$Outbound;
}

export function unitToJSON(unit: Unit): string {
  return JSON.stringify(Unit$outboundSchema.parse(unit));
}

export function unitFromJSON(
  jsonString: string,
): SafeParseResult<Unit, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => Unit$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'Unit' from JSON`,
  );
}
