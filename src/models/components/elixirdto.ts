/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import {
  ElixirDifficulty,
  ElixirDifficulty$inboundSchema,
  ElixirDifficulty$outboundSchema,
} from "./elixirdifficulty.js";
import {
  ElixirInventorDto,
  ElixirInventorDto$inboundSchema,
  ElixirInventorDto$Outbound,
  ElixirInventorDto$outboundSchema,
} from "./elixirinventordto.js";
import {
  IngredientDto,
  IngredientDto$inboundSchema,
  IngredientDto$Outbound,
  IngredientDto$outboundSchema,
} from "./ingredientdto.js";

export type ElixirDto = {
  id?: string | undefined;
  name?: string | null | undefined;
  effect?: string | null | undefined;
  sideEffects?: string | null | undefined;
  characteristics?: string | null | undefined;
  time?: string | null | undefined;
  difficulty?: ElixirDifficulty | undefined;
  ingredients?: Array<IngredientDto> | null | undefined;
  inventors?: Array<ElixirInventorDto> | null | undefined;
  manufacturer?: string | null | undefined;
};

/** @internal */
export const ElixirDto$inboundSchema: z.ZodType<
  ElixirDto,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.string().optional(),
  name: z.nullable(z.string()).optional(),
  effect: z.nullable(z.string()).optional(),
  sideEffects: z.nullable(z.string()).optional(),
  characteristics: z.nullable(z.string()).optional(),
  time: z.nullable(z.string()).optional(),
  difficulty: ElixirDifficulty$inboundSchema.optional(),
  ingredients: z.nullable(z.array(IngredientDto$inboundSchema)).optional(),
  inventors: z.nullable(z.array(ElixirInventorDto$inboundSchema)).optional(),
  manufacturer: z.nullable(z.string()).optional(),
});

/** @internal */
export type ElixirDto$Outbound = {
  id?: string | undefined;
  name?: string | null | undefined;
  effect?: string | null | undefined;
  sideEffects?: string | null | undefined;
  characteristics?: string | null | undefined;
  time?: string | null | undefined;
  difficulty?: string | undefined;
  ingredients?: Array<IngredientDto$Outbound> | null | undefined;
  inventors?: Array<ElixirInventorDto$Outbound> | null | undefined;
  manufacturer?: string | null | undefined;
};

/** @internal */
export const ElixirDto$outboundSchema: z.ZodType<
  ElixirDto$Outbound,
  z.ZodTypeDef,
  ElixirDto
> = z.object({
  id: z.string().optional(),
  name: z.nullable(z.string()).optional(),
  effect: z.nullable(z.string()).optional(),
  sideEffects: z.nullable(z.string()).optional(),
  characteristics: z.nullable(z.string()).optional(),
  time: z.nullable(z.string()).optional(),
  difficulty: ElixirDifficulty$outboundSchema.optional(),
  ingredients: z.nullable(z.array(IngredientDto$outboundSchema)).optional(),
  inventors: z.nullable(z.array(ElixirInventorDto$outboundSchema)).optional(),
  manufacturer: z.nullable(z.string()).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ElixirDto$ {
  /** @deprecated use `ElixirDto$inboundSchema` instead. */
  export const inboundSchema = ElixirDto$inboundSchema;
  /** @deprecated use `ElixirDto$outboundSchema` instead. */
  export const outboundSchema = ElixirDto$outboundSchema;
  /** @deprecated use `ElixirDto$Outbound` instead. */
  export type Outbound = ElixirDto$Outbound;
}

export function elixirDtoToJSON(elixirDto: ElixirDto): string {
  return JSON.stringify(ElixirDto$outboundSchema.parse(elixirDto));
}

export function elixirDtoFromJSON(
  jsonString: string,
): SafeParseResult<ElixirDto, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ElixirDto$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ElixirDto' from JSON`,
  );
}
