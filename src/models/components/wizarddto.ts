/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import {
  WizardElixirDto,
  WizardElixirDto$inboundSchema,
  WizardElixirDto$Outbound,
  WizardElixirDto$outboundSchema,
} from "./wizardelixirdto.js";

export type WizardDto = {
  elixirs?: Array<WizardElixirDto> | null | undefined;
  id?: string | undefined;
  firstName?: string | null | undefined;
  lastName?: string | null | undefined;
};

/** @internal */
export const WizardDto$inboundSchema: z.ZodType<
  WizardDto,
  z.ZodTypeDef,
  unknown
> = z.object({
  elixirs: z.nullable(z.array(WizardElixirDto$inboundSchema)).optional(),
  id: z.string().optional(),
  firstName: z.nullable(z.string()).optional(),
  lastName: z.nullable(z.string()).optional(),
});

/** @internal */
export type WizardDto$Outbound = {
  elixirs?: Array<WizardElixirDto$Outbound> | null | undefined;
  id?: string | undefined;
  firstName?: string | null | undefined;
  lastName?: string | null | undefined;
};

/** @internal */
export const WizardDto$outboundSchema: z.ZodType<
  WizardDto$Outbound,
  z.ZodTypeDef,
  WizardDto
> = z.object({
  elixirs: z.nullable(z.array(WizardElixirDto$outboundSchema)).optional(),
  id: z.string().optional(),
  firstName: z.nullable(z.string()).optional(),
  lastName: z.nullable(z.string()).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace WizardDto$ {
  /** @deprecated use `WizardDto$inboundSchema` instead. */
  export const inboundSchema = WizardDto$inboundSchema;
  /** @deprecated use `WizardDto$outboundSchema` instead. */
  export const outboundSchema = WizardDto$outboundSchema;
  /** @deprecated use `WizardDto$Outbound` instead. */
  export type Outbound = WizardDto$Outbound;
}

export function wizardDtoToJSON(wizardDto: WizardDto): string {
  return JSON.stringify(WizardDto$outboundSchema.parse(wizardDto));
}

export function wizardDtoFromJSON(
  jsonString: string,
): SafeParseResult<WizardDto, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => WizardDto$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'WizardDto' from JSON`,
  );
}
