/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type ElixirInventorDto = {
  id?: string | undefined;
  firstName?: string | null | undefined;
  lastName?: string | null | undefined;
};

/** @internal */
export const ElixirInventorDto$inboundSchema: z.ZodType<
  ElixirInventorDto,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.string().optional(),
  firstName: z.nullable(z.string()).optional(),
  lastName: z.nullable(z.string()).optional(),
});

/** @internal */
export type ElixirInventorDto$Outbound = {
  id?: string | undefined;
  firstName?: string | null | undefined;
  lastName?: string | null | undefined;
};

/** @internal */
export const ElixirInventorDto$outboundSchema: z.ZodType<
  ElixirInventorDto$Outbound,
  z.ZodTypeDef,
  ElixirInventorDto
> = z.object({
  id: z.string().optional(),
  firstName: z.nullable(z.string()).optional(),
  lastName: z.nullable(z.string()).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ElixirInventorDto$ {
  /** @deprecated use `ElixirInventorDto$inboundSchema` instead. */
  export const inboundSchema = ElixirInventorDto$inboundSchema;
  /** @deprecated use `ElixirInventorDto$outboundSchema` instead. */
  export const outboundSchema = ElixirInventorDto$outboundSchema;
  /** @deprecated use `ElixirInventorDto$Outbound` instead. */
  export type Outbound = ElixirInventorDto$Outbound;
}

export function elixirInventorDtoToJSON(
  elixirInventorDto: ElixirInventorDto,
): string {
  return JSON.stringify(
    ElixirInventorDto$outboundSchema.parse(elixirInventorDto),
  );
}

export function elixirInventorDtoFromJSON(
  jsonString: string,
): SafeParseResult<ElixirInventorDto, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ElixirInventorDto$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ElixirInventorDto' from JSON`,
  );
}
